// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@class UITextField;

/// The JudoPayInputField is a UIView subclass that is used to help to validate and visualize common information related to payments. This class delivers the common ground for the UI and UX. Text fields can either be used in a side-by-side motion (title on the left and input text field on the right) or with a floating title that floats to the top as soon as a user starts entering their details.
/// It is not recommended to use this class directly but rather use the subclasses of JudoPayInputField that are also provided in judoKit as this class does not do any validation which are necessary for making any kind of transaction.
SWIFT_CLASS("_TtC7JudoKit17JudoPayInputField")
@interface JudoPayInputField : UIView <UITextFieldDelegate>
/// Designated Initializer for JudoPayInputField
/// \param frame the frame of the input view
///
///
/// returns:
/// a JudoPayInputField instance
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Required initializer set as convenience to trigger the designated initializer that contains all necessary initialization methods
/// \param aDecoder decoder is ignored
///
///
/// returns:
/// a JudoPayInputField instance
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)layoutSubviews;
/// In the case of an updated card logo, this method animates the change
- (void)updateCardLogo;
/// Set current object as active text field visually
/// \param isActive Boolean stating whether textfield has become active or inactive
///
- (void)setActive:(BOOL)isActive;
/// Method that dismisses the error generated in the <code>errorAnmiation:</code> method
- (void)dismissError;
/// Delegate method when text field did begin editing
/// \param textField The <code>UITextField</code> that has begun editing
///
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
/// Delegate method when text field did end editing
/// \param textField the <code>UITextField</code> that has ended editing
///
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


/// The BillingCountryInputField is an input field configured to select a billing country out of a selected set of countries that we currently support.
SWIFT_CLASS("_TtC7JudoKit24BillingCountryInputField")
@interface BillingCountryInputField : JudoPayInputField
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// boolean to change characters in given range for a text field
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this inputField is valid
///
/// returns:
/// true if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver inputField
///
/// returns:
/// a string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Width of the title
///
/// returns:
/// width of the title
- (NSInteger)titleWidth SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UIPickerView;

@interface BillingCountryInputField (SWIFT_EXTENSION(JudoKit)) <UIPickerViewDelegate>
/// Delegate method for billingCountryPickerView
/// \param pickerView The caller
///
/// \param row The row
///
/// \param component The component
///
///
/// returns:
/// title of a given component and row
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
/// Delegate method for billingCountryPickerView that had a given row in a component selected
/// \param pickerView The caller
///
/// \param row The row
///
/// \param component The component
///
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


@interface BillingCountryInputField (SWIFT_EXTENSION(JudoKit)) <UIPickerViewDataSource>
/// Datasource method for billingCountryPickerView
/// \param pickerView PickerView that calls its delegate
///
///
/// returns:
/// the number of components in the pickerView
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
/// Datasource method for billingCountryPickerView
/// \param pickerView Picker view
///
/// \param component A given component
///
///
/// returns:
/// number of rows in component
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
@end


/// <em>CardDetails</em>
/// The CardDetails object stores information that is returned from a successful payment or pre-auth
/// This class also implements the <code>NSCoding</code> protocol to enable serialization for persistency
SWIFT_CLASS("_TtC7JudoKit11CardDetails")
@interface CardDetails : NSObject <NSCoding>
/// The last four digits of the card used for this transaction
@property (nonatomic, copy) NSString * _Nullable cardLastFour;
/// Expiry date of the card used for this transaction formatted as a two digit month and year i.e. MM/YY
@property (nonatomic, readonly, copy) NSString * _Nullable endDate;
/// Can be used to charge future payments against this card
@property (nonatomic, readonly, copy) NSString * _Nullable cardToken;
/// The card number if available
@property (nonatomic, copy) NSString * _Nullable cardNumber;
@property (nonatomic) BOOL isCardNumberValid;
/// Description string for print functions
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Designated initializer for Card Details
/// \param dict all parameters as a dictionary
///
///
/// returns:
/// a CardDetails object
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
/// Initialise the CardDetails object with a coder
/// \param decoder the decoder object
///
///
/// returns:
/// a CardDetails object or nil
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Encode the receiver CardDetails object
/// \param aCoder the Coder
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Get a formatted string with the right whitespacing for a certain card type
///
/// returns:
/// a string with the last four digits with the right format
- (NSString * _Nullable)formattedLastFour SWIFT_WARN_UNUSED_RESULT;
/// Get a formatted string with the right slash for a date
///
/// returns:
/// a string with the date as shown on the credit card with the right format
- (NSString * _Nullable)formattedEndDate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;
@class CardLogoView;

/// The CardInputField is an input field configured to detect, validate and present card numbers of various types of credit cards.
SWIFT_CLASS("_TtC7JudoKit14CardInputField")
@interface CardInputField : JudoPayInputField
/// if it is a token payment, different validation criteria apply
@property (nonatomic) BOOL isTokenPayment;
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// boolean to change characters in given range for a textfield
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this inputField is valid
///
/// returns:
/// true if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Subclassed method that is called when textField content was changed
/// \param textField the textfield of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// The placeholder string for the current inputField
///
/// returns:
/// an Attributed String that is the placeholder of the receiver
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Boolean indicating whether the receiver has to show a logo
///
/// returns:
/// true if inputField shows a Logo
- (BOOL)containsLogo SWIFT_WARN_UNUSED_RESULT;
/// If the receiving inputField contains a Logo, this method returns Some
///
/// returns:
/// an optional CardLogoView
- (CardLogoView * _Nullable)logoView SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver inputField
///
/// returns:
/// a string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Hint label text
///
/// returns:
/// string that is shown as a hint when user resides in a inputField for more than 5 seconds
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// The CardLogoView that shows a given card logo on a view
SWIFT_CLASS("_TtC7JudoKit12CardLogoView")
@interface CardLogoView : UIView
/// Required initializer for creating a logo connected to cards
/// \param aDecoder the decoder
///
///
/// returns:
/// a deserialized CardLogoView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Override function that draws the content of the CardLogoView
/// \param rect the CGRect to draw in
///
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The DateInputField is an input field configured to detect, validate and dates that are set to define a start or end date of various types of credit cards.
SWIFT_CLASS("_TtC7JudoKit14DateInputField")
@interface DateInputField : JudoPayInputField
/// Boolean stating whether input field should identify as a start or end date
@property (nonatomic) BOOL isStartDate;
/// Boolean stating whether input field should identify as a start or end date
@property (nonatomic) BOOL isVisible;
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// boolean to change characters in given range for a textfield
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this inputField is valid
///
/// returns:
/// true if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Subclassed method that is called when textField content was changed
/// \param textField the textfield of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// The placeholder string for the current inputField
///
/// returns:
/// an Attributed String that is the placeholder of the receiver
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver inputField
///
/// returns:
/// a string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Hint label text
///
/// returns:
/// string that is shown as a hint when user resides in a inputField for more than 5 seconds
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface DateInputField (SWIFT_EXTENSION(JudoKit)) <UIPickerViewDataSource>
/// Datasource method for datePickerView
/// \param pickerView PickerView that calls its delegate
///
///
/// returns:
/// The number of components in the pickerView
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView * _Nonnull)pickerView SWIFT_WARN_UNUSED_RESULT;
/// Datasource method for datePickerView
/// \param pickerView PickerView that calls its delegate
///
/// \param component A given component
///
///
/// returns:
/// number of rows in component
- (NSInteger)pickerView:(UIPickerView * _Nonnull)pickerView numberOfRowsInComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
@end


@interface DateInputField (SWIFT_EXTENSION(JudoKit)) <UIPickerViewDelegate>
/// Delegate method for datePickerView
/// \param pickerView The caller
///
/// \param row The row
///
/// \param component The component
///
///
/// returns:
/// content of a given component and row
- (NSString * _Nullable)pickerView:(UIPickerView * _Nonnull)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component SWIFT_WARN_UNUSED_RESULT;
/// Delegate method for datePickerView that had a given row in a component selected
/// \param pickerView The caller
///
/// \param row The row
///
/// \param component The component
///
- (void)pickerView:(UIPickerView * _Nonnull)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component;
@end


/// The IssueNumberInputField is an input field configured to detect, validate and present issue numbers for Maestro cards.
SWIFT_CLASS("_TtC7JudoKit21IssueNumberInputField")
@interface IssueNumberInputField : JudoPayInputField
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// boolean to change characters in given range for a textfield
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this input field is valid
///
/// returns:
/// True if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Subclassed method that is called when text field content was changed
/// \param textField the textfield of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// The placeholder string for the current input field
///
/// returns:
/// an Attributed String that is the placeholder of the receiver
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver input field
///
/// returns:
/// a string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Hint label text
///
/// returns:
/// string that is shown as a hint when user resides in a inputField for more than 5 seconds
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// The type for all the input fields to conform to
SWIFT_PROTOCOL("_TtP7JudoKit13JudoInputType_")
@protocol JudoInputType
/// Helper method for the hintLabel to disappear or reset the timer when called. This is triggered by the <code>shouldChangeCharactersInRange:</code> method in each of the <code>inputField</code> subclasses
- (void)didChangeInputText;
/// Method that is called after a value has changed. This method is intended for subclassing.
/// \param textField the <code>UITextField</code> that has a changed value
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// Placeholder string for text fields depending on layout configuration. This method is intended for subclassing.
///
/// returns:
/// an NSAttributedString depending on color and configuration
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// An indication of whether an input field contains a Logo or not. This method is intended for subclassing.
///
/// returns:
/// a boolean indication whether logo should be shown
- (BOOL)containsLogo SWIFT_WARN_UNUSED_RESULT;
/// The logo of an input field if available. This method is intended for subclassing.
///
/// returns:
/// the logo of an inputField
- (CardLogoView * _Nullable)logoView SWIFT_WARN_UNUSED_RESULT;
/// The title of an input field. This method is intended for subclassing.
///
/// returns:
/// the title of an inputField
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// The title width for a given title and input field. This method is intended for subclassing.
///
/// returns:
/// a title width in integer
- (NSInteger)titleWidth SWIFT_WARN_UNUSED_RESULT;
/// A hint text for a given input field. This method is intended for subclassing.
///
/// returns:
/// a String with instructions for a given inputField that pops up after 3 seconds of being idle
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
/// A function that replies whether the entered text in that specific field is valid or not.
///
/// returns:
/// true if information in field is valid
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
@end



@interface JudoPayInputField (SWIFT_EXTENSION(JudoKit)) <JudoInputType>
/// Checks if the receiving input field has content that is valid
///
/// returns:
/// true if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Helper call for delegate method
- (void)didChangeInputText;
/// Subclassed method that is called when text field content was changed
/// \param textField the textfield of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// The placeholder string for the current input field
///
/// returns:
/// an Attributed String that is the placeholder of the receiver
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Boolean indicating whether the receiver has to show a logo
///
/// returns:
/// true if inputField shows a Logo
- (BOOL)containsLogo SWIFT_WARN_UNUSED_RESULT;
/// If the receiving input field contains a logo, this method returns Some
///
/// returns:
/// an optional CardLogoView
- (CardLogoView * _Nullable)logoView SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver input field
///
/// returns:
/// a string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Width of the title
///
/// returns:
/// width of the title
- (NSInteger)titleWidth SWIFT_WARN_UNUSED_RESULT;
/// Hint label text
///
/// returns:
/// string that is shown as a hint when user resides in a inputField for more than 5 seconds
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
- (void)displayHintWithMessage:(NSString * _Nonnull)message;
- (void)displayErrorWithMessage:(NSString * _Nonnull)message;
@end

@class UIScrollView;

/// JudoPayView - the main view in the transaction journey
SWIFT_CLASS("_TtC7JudoKit11JudoPayView")
@interface JudoPayView : UIView
/// The content view of the JudoPayView
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull contentView;
/// Required initializer for the JudoPayView that will fail
/// \param aDecoder A Decoder
///
///
/// returns:
/// a fatal error will be thrown as this class should not be retrieved by decoding
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This method is intended to toggle the start date and issue number fields visibility when a Card has been identified.
/// <ul>
///   <li>
///     Discussion: Maestro cards need a start date or an issue number to be entered for making any transaction
///   </li>
/// </ul>
/// \param isVisible Whether start date and issue number fields should be visible
///
- (void)toggleStartDateVisibility:(BOOL)isVisible;
/// This method toggles the visibility of address fields (billing country and post code).
/// <ul>
///   <li>
///     Discussion: If AVS is necessary, this should be activated. AVS only needs Postcode to verify
///   </li>
/// </ul>
/// \param isVisible Whether post code and billing country fields should be visible
///
/// \param completion Block that is called when animation was finished
///
- (void)toggleAVSVisibility:(BOOL)isVisible completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface JudoPayView (SWIFT_EXTENSION(JudoKit))
/// Delegate method that is triggered when the CardInputField did find a valid number
/// \param input The input field calling the delegate method
///
/// \param cardNumberString The card number that has been entered as a String
///
- (void)cardInput:(CardInputField * _Nonnull)input didFindValidNumber:(NSString * _Nonnull)cardNumberString;
/// Delegate method that is triggered when the date input field has found a valid date
/// \param input The input field calling the delegate method
///
/// \param date The valid date that has been entered
///
- (void)dateInput:(DateInputField * _Nonnull)input didFindValidDate:(NSString * _Nonnull)date;
/// Delegate method that is triggered when the issueNumberInputField entered a code
/// \param input The issueNumberInputField calling the delegate method
///
/// \param issueNumber The issue number that has been entered as a String
///
- (void)issueNumberInputDidEnterCode:(IssueNumberInputField * _Nonnull)inputField issueNumber:(NSString * _Nonnull)issueNumber;
/// Delegate method that is triggered when the judoPayInputField was validated
/// \param input The input field calling the delegate method
///
/// \param isValid A boolean that indicates whether the input is valid or invalid
///
- (void)judoPayInput:(JudoPayInputField * _Nonnull)input isValid:(BOOL)isValid;
/// Delegate method that is called whenever any input field has been manipulated
/// \param input The input field calling the delegate method
///
- (void)judoPayInputDidChangeText:(JudoPayInputField * _Nonnull)input;
@end

@class NSBundle;

/// the JudoPayViewController is the one solution build to guide a user through the journey of entering their card details.
SWIFT_CLASS("_TtC7JudoKit21JudoPayViewController")
@interface JudoPayViewController : UIViewController
/// The number (e.g. “123-456” or “654321”) identifying the Merchant you wish to pay
@property (nonatomic, readonly, copy) NSString * _Nullable judoId;
/// The overridden view object forwarding to a JudoPayView
@property (nonatomic, strong) UIView * _Null_unspecified view;
/// Designated initializer that will fail if called
/// \param nibNameOrNil Nib name or nil
///
/// \param nibBundleOrNil Bundle or nil
///
///
/// returns:
/// will crash if executed
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Designated initializer that will fail if called
/// \param aDecoder A decoder
///
///
/// returns:
/// will crash if executed
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// viewDidLoad
- (void)viewDidLoad;
/// viewWillAppear
/// \param animated Animated
///
- (void)viewWillAppear:(BOOL)animated;
/// viewDidAppear
/// \param animated Animated
///
- (void)viewDidAppear:(BOOL)animated;
@end

@class UIWebView;

@interface JudoPayViewController (SWIFT_EXTENSION(JudoKit)) <UIWebViewDelegate>
/// webView delegate method
/// \param webView The web view
///
/// \param request The request that was called
///
/// \param navigationType The navigation Type
///
///
/// returns:
/// return whether webView should start loading the request
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
/// webView delegate method that indicates the webView has finished loading
/// \param webView The web view
///
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
/// webView delegate method that indicates the webView has failed with an error
/// \param webView The web view
///
/// \param error The error
///
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nonnull)error;
@end


/// The LoadingView is a convenience class that is configured to show a block with a activityIndicator and a description text
SWIFT_CLASS("_TtC7JudoKit11LoadingView")
@interface LoadingView : UIView
/// Convenience initializer
/// \param frame This value is ignored - view is sized via autolayout
///
///
/// returns:
/// a LoadingView object
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Convenience initializer
/// \param aDecoder This value is ignored
///
///
/// returns:
/// a LoadingView object
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
@end


/// The PayButton is a button that is configured to layout a judo pay button for the transaction journey
SWIFT_CLASS("_TtC7JudoKit9PayButton")
@interface PayButton : UIButton
/// Convenience initializer
/// \param frame This value is ignored - view is sized via autolayout
///
///
/// returns:
/// A PayButton object
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// Convenience initializer
/// \param aDecoder Ignored parameter
///
///
/// returns:
/// A PayButton object
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// Helper method to setup the view
- (void)setupView;
@end


/// The PostCodeInputField is an input field configured to detect, validate and present post codes of various countries.
SWIFT_CLASS("_TtC7JudoKit18PostCodeInputField")
@interface PostCodeInputField : JudoPayInputField
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// Boolean to change characters in given range for a text field
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this input field is valid
///
/// returns:
/// True if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Subclassed method that is called when text field content was changed
/// \param textField The text field of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// Title of the receiver input field
///
/// returns:
/// A string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Width of the title
///
/// returns:
/// Width of the title
- (NSInteger)titleWidth SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// The SecurityInputField is an input field configured to detect, validate and present security numbers of various types of credit cards.
SWIFT_CLASS("_TtC7JudoKit18SecurityInputField")
@interface SecurityInputField : JudoPayInputField
/// if it is a token payment, a different hint label text should appear
@property (nonatomic) BOOL isTokenPayment;
/// Delegate method implementation
/// \param textField Text field
///
/// \param range Range
///
/// \param string String
///
///
/// returns:
/// Boolean to change characters in given range for a textfield
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Check if this input field is valid
///
/// returns:
/// True if valid input
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
/// Subclassed method that is called when text field content was changed
/// \param textField The text field of which the content has changed
///
- (void)textFieldDidChangeValue:(UITextField * _Nonnull)textField;
/// The placeholder string for the current input field
///
/// returns:
/// An Attributed String that is the placeholder of the receiver
- (NSAttributedString * _Nullable)placeholder SWIFT_WARN_UNUSED_RESULT;
/// Boolean indicating whether the receiver has to show a logo
///
/// returns:
/// True if input field shows a Logo
- (BOOL)containsLogo SWIFT_WARN_UNUSED_RESULT;
/// If the receiving input field contains a logo, this method returns Some
///
/// returns:
/// An optional CardLogoView
- (CardLogoView * _Nullable)logoView SWIFT_WARN_UNUSED_RESULT;
/// Title of the receiver input field
///
/// returns:
/// A string that is the title of the receiver
- (NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Hint label text
///
/// returns:
/// String that is shown as a hint when user resides in a input field for more than 5 seconds
- (NSString * _Nonnull)hintLabelText SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableURLRequest;

/// The Session struct is a wrapper for the REST API calls
SWIFT_CLASS("_TtC7JudoKit7Session")
@interface Session : NSObject
/// identifying whether developers are using their own UI or the Judo Out of the box UI
@property (nonatomic) BOOL uiClientMode;
/// Set the app to sandboxed mode
@property (nonatomic) BOOL sandboxed;
- (NSString * _Nonnull)certPath SWIFT_WARN_UNUSED_RESULT;
/// Helper Method to create a JSON HTTP request with authentication
/// \param url the url for the request
///
///
/// returns:
/// a JSON HTTP request with authorization set
- (NSMutableURLRequest * _Nonnull)judoRequest:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

@interface Session (SWIFT_EXTENSION(JudoKit)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end


@interface NSTimer (SWIFT_EXTENSION(JudoKit))
@end


@interface UIColor (SWIFT_EXTENSION(JudoKit))
/// Inverse color
///
/// returns:
/// The inverse color of the receiver
- (UIColor * _Nonnull)inverseColor SWIFT_WARN_UNUSED_RESULT;
/// Calculates a weighed greyscale representation percentage of the receiver
///
/// returns:
/// A greyscale representation percentage CGFloat
- (CGFloat)greyScale SWIFT_WARN_UNUSED_RESULT;
@end


@interface UINavigationBar (SWIFT_EXTENSION(JudoKit))
@end


/// The 3DSWebView is a UIWebView subclass that is configured to detect the execution of a 3DS validation page.
SWIFT_CLASS("_TtC7JudoKit10_DSWebView")
@interface _DSWebView : UIWebView
/// Designated initializer
///
/// returns:
/// a 3DSWebView object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer
/// \param frame ignored
///
///
/// returns:
/// a 3DSWebView object
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// Convenience initializer
/// \param aDecoder ignored
///
///
/// returns:
/// a 3DSWebView object
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// Helper method to setup the view
- (void)setupView;
/// This method initiates the webview to load the 3DS website.
/// \param payload the payload that contains the 3DS information to be loaded
///
///
/// throws:
/// <code>Failed3DSError</code> when payload contains faulty information
///
/// returns:
/// the receiptId of the transaction
- (NSString * _Nullable)load3DSWithPayload:(NSDictionary<NSString *, id> * _Nonnull)payload error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

#pragma clang diagnostic pop
